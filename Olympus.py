# -*- generated by 1.0.9 -*-
import da
PatternExpr_174 = da.pat.TuplePattern([da.pat.ConstantPattern('req_get_current_configuration'), da.pat.FreePattern('client')])
PatternExpr_197 = da.pat.TuplePattern([da.pat.ConstantPattern('req_get_current_configuration'), da.pat.FreePattern('client')])
PatternExpr_310 = da.pat.TuplePattern([da.pat.ConstantPattern('res_get_current_configuration'), da.pat.FreePattern('currentConfiguration')])
PatternExpr_348 = da.pat.TuplePattern([da.pat.ConstantPattern('res_operation'), da.pat.FreePattern('result')])
PatternExpr_371 = da.pat.TuplePattern([da.pat.ConstantPattern('res_get_current_configuration'), da.pat.FreePattern('currentConfiguration')])
PatternExpr_389 = da.pat.TuplePattern([da.pat.ConstantPattern('res_operation'), da.pat.FreePattern('result')])
PatternExpr_428 = da.pat.TuplePattern([da.pat.ConstantPattern('operation'), da.pat.FreePattern('client')])
PatternExpr_451 = da.pat.TuplePattern([da.pat.ConstantPattern('msg_operation'), da.pat.FreePattern('client')])
_config_object = {}

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._OlympusReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_0', PatternExpr_174, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_1', PatternExpr_197, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_196])])

    def setup(self, **rest_506):
        super().setup(**rest_506)
        self._state.configuration = None

    def run(self):
        self.output('Olympus:>> Started')
        super()._label('_st_label_171', block=False)
        client = None

        def ExistentialOpExpr_172():
            nonlocal client
            for (_, _, (_ConstantPattern189_, client)) in self._OlympusReceivedEvent_0:
                if (_ConstantPattern189_ == 'req_get_current_configuration'):
                    if True:
                        return True
            return False
        _st_label_171 = 0
        while (_st_label_171 == 0):
            _st_label_171 += 1
            if ExistentialOpExpr_172():
                _st_label_171 += 1
            else:
                super()._label('_st_label_171', block=True)
                _st_label_171 -= 1

    def makeNewConfiguration(self):
        self.output('Olympus:>> Making New Configuration')
        replicaList = self.new(Replica, num=3)
        self.output('Olympus:>> Setting up Replicas')
        i = 0
        for replica in replicaList:
            self._setup(replica, args=(self._id, replicaList, i))
            i += 1
        self._start(replicaList)
        return list(replicaList)

    def _Olympus_handler_196(self, client):
        self.output('Olympus:>> Received req_get_current_configuration from Client')
        if (self._state.configuration is None):
            self.output('Olympus:>> Configuration is NONE')
            self._state.configuration = self.makeNewConfiguration()
        self.output('Olympus:>> Replying res_get_current_configuration with configuration')
        self.send(('res_get_current_configuration', self._state.configuration), to=client)
    _Olympus_handler_196._labels = None
    _Olympus_handler_196._notlabels = None

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ClientReceivedEvent_0 = []
        self._ClientReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_310, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_348, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_2', PatternExpr_371, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_370]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_3', PatternExpr_389, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_388])])

    def setup(self, olympus, **rest_506):
        super().setup(olympus=olympus, **rest_506)
        self._state.olympus = olympus
        self._state.headNode = None

    def run(self):
        self.output('Client:>> Started')
        if (self._state.headNode is None):
            self.output('Client:>> Current Configuration is None')
            self.output('Client:>> Sending req_get_current_configuration to Olympus')
            self.send(('req_get_current_configuration', self._id), to=self._state.olympus)
            self.output('Client:>> Waiting for res_get_current_configuration from Olympus')
            super()._label('_st_label_307', block=False)
            currentConfiguration = None

            def ExistentialOpExpr_308():
                nonlocal currentConfiguration
                for (_, _, (_ConstantPattern325_, currentConfiguration)) in self._ClientReceivedEvent_0:
                    if (_ConstantPattern325_ == 'res_get_current_configuration'):
                        if True:
                            return True
                return False
            _st_label_307 = 0
            while (_st_label_307 == 0):
                _st_label_307 += 1
                if ExistentialOpExpr_308():
                    _st_label_307 += 1
                else:
                    super()._label('_st_label_307', block=True)
                    _st_label_307 -= 1
            self.output('Client:>> Ready to perform operation')
        self.output('Client:>> Already have headnode')
        self.send(('msg_operation', self._id), to=self._state.headNode[0])
        super()._label('_st_label_345', block=False)
        result = None

        def ExistentialOpExpr_346():
            nonlocal result
            for (_, _, (_ConstantPattern363_, result)) in self._ClientReceivedEvent_1:
                if (_ConstantPattern363_ == 'res_operation'):
                    if True:
                        return True
            return False
        _st_label_345 = 0
        while (_st_label_345 == 0):
            _st_label_345 += 1
            if ExistentialOpExpr_346():
                _st_label_345 += 1
            else:
                super()._label('_st_label_345', block=True)
                _st_label_345 -= 1

    def _Client_handler_370(self, currentConfiguration):
        self.output('Client:>> Received res_get_current_configuration from Olympus')
        self._state.headNode = currentConfiguration
        self.output('Client:>> currentConfiguration Updated')
    _Client_handler_370._labels = None
    _Client_handler_370._notlabels = None

    def _Client_handler_388(self, result):
        self.output('Client:>> Received res_operation from Replica')
        self.output('Client:>> Result of operation is ', result)
    _Client_handler_388._labels = None
    _Client_handler_388._notlabels = None

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ReplicaReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_0', PatternExpr_428, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_1', PatternExpr_451, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_450])])

    def setup(self, olympus, replicaList, index, **rest_506):
        super().setup(olympus=olympus, replicaList=replicaList, index=index, **rest_506)
        self._state.olympus = olympus
        self._state.replicaList = replicaList
        self._state.index = index
        self.output('Replica', self._state.index, ':>> SETUP is completed')

    def run(self):
        self.output('Replica', self._state.index, ':>> Replica Started')
        super()._label('_st_label_425', block=False)
        client = None

        def ExistentialOpExpr_426():
            nonlocal client
            for (_, _, (_ConstantPattern443_, client)) in self._ReplicaReceivedEvent_0:
                if (_ConstantPattern443_ == 'operation'):
                    if True:
                        return True
            return False
        _st_label_425 = 0
        while (_st_label_425 == 0):
            _st_label_425 += 1
            if ExistentialOpExpr_426():
                _st_label_425 += 1
            else:
                super()._label('_st_label_425', block=True)
                _st_label_425 -= 1

    def _Replica_handler_450(self, client):
        self.output('Replica', self._state.index, ':>> Received msg_operation from Client')
        result = 'yayee'
        self.send(('res_operation', result), to=client)
        self.output('Replica', self._state.index, ':>> Replied msg_operation to Client')
    _Replica_handler_450._labels = None
    _Replica_handler_450._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])
    _config_object = {'channel': 'Fifo', 'clock': 'Lamport'}

    def run(self):
        olympus = self.new(Olympus, args=(), at='OlympusNode')
        client = self.new(Client, args=(olympus,))
        self._start(olympus)
        self._start(client)
