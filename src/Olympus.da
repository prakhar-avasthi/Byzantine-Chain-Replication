class Olympus(process):
    def setup():
        self.config_id = None
        self.configuration = None

    def run():
        output("Olympus:>> Started")
        await(some(received(('req_get_current_configuration', client))))

    def receive(msg = ('req_get_current_configuration', client)):
        output("Olympus:>> Received req_get_current_configuration from Client")
        if self.configuration is None:
            output("Olympus:>> Configuration is NONE")
            config = self.makeNewConfiguration()
            self.config_id = config[0]
            self.configuration = config[1]

        output("Olympus:>> Replying res_get_current_configuration with configuration")
        send(('res_get_current_configuration', self.config_id, self.configuration), to=client)

    def makeNewConfiguration():
        output("Olympus:>> Making New Configuration")
        if self.config_id is None:
            self.config_id = 1
        else:
            self.config_id += 1

        class_replica = import_da('Replica')
        replicaList = new(class_replica.Replica, num= 3)
        output("Olympus:>> Setting up Replicas")
        i = 0
        for replica in replicaList:
            setup(replica, args=(self, replicaList, i))
            i += 1
        start(replicaList)
        return (self.config_id, list(replicaList))
