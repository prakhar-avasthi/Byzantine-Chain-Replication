class Olympus(process):
    def setup(num_replica):
        output("Olympus:>> Setup")
        class_config = import_da('Configuration')
        self.config = class_config.Configuration()

    def run():
        output("Olympus:>> Started")
        await(some(received(('req_get_current_configuration', client))))

    def receive(msg = ('req_get_current_configuration', client)):
        output("Olympus:>> Received req_get_current_configuration from Client")
        if self.config.config_id is None or self.config.config_id is None:
            output("Olympus:>> Configuration is NONE")
            makeNewConfiguration()

        output("Olympus:>> Replying res_get_current_configuration with configuration")
        send(('res_get_current_configuration', self.config), to=client)

    def makeNewConfiguration():
        output("Olympus:>> Making New Configuration")
        if self.config.config_id is None:
            self.config.config_id = 1
        else:
            self.config.config_id += 1

        class_replica = import_da('Replica')
        replicaList = new(class_replica.Replica, num= self.num_replica)
        output("Olympus:>> Setting up Replicas")
        i = 0
        for replica in replicaList:
            if i is 0:
                setup(replica, args=(self, list(replicaList), i, 'head', dict()))
            elif i is 2:
                setup(replica, args=(self, list(replicaList), i, 'tail', dict()))
            else:
                setup(replica, args=(self, list(replicaList), i, 'normal_replica', dict()))
            i += 1
        self.config.list_replica = list(replicaList)
        start(replicaList)
