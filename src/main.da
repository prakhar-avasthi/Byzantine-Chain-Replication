class Olympus(process):
    def setup():
        self.configuration = None

    def run():
        output("Olympus:>> Started")
        await(some(received(('req_get_current_configuration', client))))

    def receive(msg = ('req_get_current_configuration', client)):
        output("Olympus:>> Received req_get_current_configuration from Client")
        if self.configuration is None:
            output("Olympus:>> Configuration is NONE")
            self.configuration = self.makeNewConfiguration()

        output("Olympus:>> Replying res_get_current_configuration with configuration")
        send(('res_get_current_configuration', self.configuration), to=client)

    def makeNewConfiguration():
        output("Olympus:>> Making New Configuration")
        replicaList = new(Replica, num= 3)
        output("Olympus:>> Setting up Replicas")
        i = 0
        for replica in replicaList:
            setup(replica, args=(self, replicaList, i))
            i += 1
        start(replicaList)
        return list(replicaList)


class Client(process):
    def setup(olympus):
        self.headNode = None

    def run():
        output("Client:>> Started")
        if self.headNode is None:
            output("Client:>> Current Configuration is None")
            output("Client:>> Sending req_get_current_configuration to Olympus")
            send(('req_get_current_configuration', self), to=olympus)
            output("Client:>> Waiting for res_get_current_configuration from Olympus")
            await(some(received(('res_get_current_configuration', currentConfiguration))))
            output("Client:>> Ready to perform operation")

        output("Client:>> Already have headnode")
        send(('msg_operation', self), to=self.headNode[0])
        await(some(received(("res_operation", result))))

    def receive (msg= ('res_get_current_configuration', currentConfiguration)):
        output("Client:>> Received res_get_current_configuration from Olympus")
        self.headNode = currentConfiguration
        output("Client:>> currentConfiguration Updated")

    def receive (msg= ('res_operation', result)):
        output("Client:>> Received res_operation from Replica")
        output("Client:>> Result of operation is ", result)

class Replica(process):
    def setup(olympus, replicaList, index):
        output("Replica",self.index,":>> SETUP is completed")

    def run():
        output("Replica",self.index,":>> Replica Started")
        await(some(received(('operation', client))))

    def receive(msg = ('msg_operation', client)):
        output("Replica",self.index,":>> Received msg_operation from Client")
        ##[TODO] perform actual operation
        result = "yayee"
        send(('res_operation', result), to=client)
        output("Replica",self.index,":>> Replied msg_operation to Client")

def main():
    olympus = new(Olympus, args=(), at='OlympusNode')
    client = new(Client, args=(olympus,))
    config(channel = Fifo, clock = Lamport)
    start(olympus)
    start(client)
