class Client(process):
    def setup(olympus, index, workload, timeout):
        self.config = None
        output("Client",index,":>> workload: ", workload)
        self.operations = None
        if not 'random' in workload:
            self.operations = workload.split(';')

    def run():
        output("Client",index,":>> Started")
        if self.config is None:
            send(('req_get_current_configuration', self), to=olympus)
            await(some(received(('res_get_current_configuration', config))))

        #Creating an operation to be send to client
        if not self.operations is None:
            for command in self.operations:
                command = command.strip()
                class_operation = import_da('Operation')
                operation = class_operation.Operation()
                operation.client_request_id = index         #sending its index to identify client
                if 'put' in command:
                    operation.type = 1
                    operation.command = command[3:]
                elif 'get' in command:
                    operation.type = 2
                    operation.command = command[3:]
                elif 'slice' in command:
                    operation.type = 3
                    operation.command = command[5:]
                elif 'append' in command:
                    operation.type = 4
                    operation.command = command[6:]

                #Sending operation to HeadNode
                output("Client",index,":>> Sending operation to Head Node: ", operation.command)
                send(('req_operation', operation, self, self.index), to=self.config.list_replica[0])
                if(await(some(received(('res_operation', operation, result, result_proof_list))))): pass
                elif timeout(timeout):
                    output("Client",index,":>> Timeout: ", operation)

        -- l
        await(some(received(('terminate_client'))))

    def receive (msg= ('res_get_current_configuration', config)):
        self.config = config

    def receive (msg= ('res_operation', operation, result, result_proof_list)):
        output("Client",index,":>> Result of operation ", operation ," is ", result)
