import pickle
import nacl.encoding
import nacl.signing
import nacl.hash

class Client(process):
    def setup(olympus, index, workload, timeout):
        self.config = None
        output("Client",index,":>> workload: ", workload)
        self.commands = None
        self.command_state = {}
        if not 'random' in workload:
            self.commands = workload.split(';')
        if not self.commands is None:
            for i in range(len(self.commands)):
                self.command_state[i] = [self.commands[i], 100]       ## State 100 -> not started


    def run():
        output("Client",index,":>> Started")
        if self.config is None:
            send(('req_get_current_configuration', self), to=olympus)
            await(some(received(('res_get_current_configuration', config))))

        #Creating an operation to be send to client
        if not self.commands is None:
            for key in self.command_state.keys():
                command_and_state = self.command_state[key]
                operation = makeOperation(key, command_and_state[0])
                command_and_state[1] = 101          ## State 101 -> in progress
                #Sending operation to HeadNode
                output("Client",index,":>> Sending operation to Head Node: ", operation.command)
                send(('req_operation', operation, self, self.index), to=self.config.list_replica[0])
                self.command_state[key] = [command_and_state[0], command_and_state[1]]
                if(await(some(received(('res_operation', operation, result, result_proof_list))))): pass
                elif timeout(timeout):
                    output("Client",index,":>> Client Timeout.")
                    for key in self.command_state.keys():
                        val = self.command_state[key]
                        output(val[0], val[1])
                        if val[1] == 101:
                            resend_operation = makeOperation(key, val[0])
                            for replica in self.config.list_replica:
                                send(('req_operation_timeout', resend_operation, self, self.index), to=replica)

        -- l
        await(some(received(('terminate_client'))))


    def makeOperation(seq_id, command):
        command = command.strip()
        class_operation = import_da('Operation')
        operation = class_operation.Operation()
        operation.client_seq_id = seq_id
        operation.client_request_id = index         #sending its index to identify client
        if 'put' in command:
            operation.type = 1
            operation.command = command[3:]
        elif 'get' in command:
            operation.type = 2
            operation.command = command[3:]
        elif 'slice' in command:
            operation.type = 3
            operation.command = command[5:]
        elif 'append' in command:
            operation.type = 4
            operation.command = command[6:]
        return operation


    def receive (msg= ('res_get_current_configuration', config)):
        self.config = config

    def receive (msg= ('res_operation', operation, result, result_proof_list)):

        discard_flag = False
        ## take a copy of result it got
        copy_result = result

        ## calculate the result hash from the result it get
        ## calculate the result digest
        HASHER = nacl.hash.sha256
        result_byte = pickle.dumps(result)
        result_digest = HASHER(result_byte, encoder=nacl.encoding.HexEncoder)

        ## check this digest with all the results in the result_proof_list so that client believe the value is correct
        for result_proof in result_proof_list:
            output("Client",index,":>> Checking the cryptohash")
            if result_proof.result != result_digest:
                output("Client",index,":>> Cryptohash is not matching so discarding the result")
                discard_flag = True

        if not discard_flag:
            output("Client",index,":>> Result of operation ", operation.command ," is ", result)
            val = self.command_state[operation.client_seq_id]
            val[1] = 102       ## State 102 -> completed
            self.command_state[operation.client_seq_id] = [val[0], val[1]]
            discard_flag = False


    def receive (msg= ('res_operation_timeout', operation, result, result_proof_list)):
        output("Client",index,":>> Got Result after timeout of operation ", operation.command ," is ", result)
