import pickle
import nacl.encoding
import nacl.signing
import nacl.hash

class Client(process):
    def setup(olympus, index, workload, timeout):
        self.config = None
        output("Client",index,":>> workload: ", workload)
        self.operations = None
        self.replica_public_keys = []
        if not 'random' in workload:
            self.operations = workload.split(';')

    def run():
        output("Client",index,":>> Started")
        if self.config is None:
            send(('req_get_current_configuration', self), to=olympus)
            await(some(received(('res_get_current_configuration', config, replica_public_keys))))

        #Creating an operation to be send to replica
        if not self.operations is None:
            for command in self.operations:
                command = command.strip()
                class_operation = import_da('Operation')
                operation = class_operation.Operation()
                operation.client_request_id = index         #sending its index to identify client
                if 'put' in command:
                    operation.type = 1
                    operation.command = command[3:]
                elif 'get' in command:
                    operation.type = 2
                    operation.command = command[3:]
                elif 'slice' in command:
                    operation.type = 3
                    operation.command = command[5:]
                elif 'append' in command:
                    operation.type = 4
                    operation.command = command[6:]

                #Sending operation to HeadNode
                output("Client",index,":>> Sending operation to Head Node: ", operation.command)
                send(('req_operation', operation, self, self.index), to=self.config.list_replica[0])
                if(await(some(received(('res_operation', operation, result, result_proof_list))))): pass
                elif timeout(timeout):
                    output("Client",index,":>> Timeout: ", operation)

        -- l
        await(some(received(('terminate_client'))))

    def receive (msg= ('res_get_current_configuration', config, replica_public_keys)):
        self.replica_public_keys = replica_public_keys
        self.config = config

    def receive (msg= ('res_operation', operation, result, result_proof_list)):

        discard_flag = False
        ## take a copy of result it got
        copy_result = result

        ## calculate the result hash from the result it get
        ## calculate the result digest
        HASHER = nacl.hash.sha256
        result_byte = pickle.dumps(result)
        result_digest = HASHER(result_byte, encoder=nacl.encoding.HexEncoder)
        unsigned_result_proof = None

        ## check this digest with all the results in the result_proof_list so that client believe the value is correct
        i = 0
        for result_proof in result_proof_list:

            try:
                unsigned_result_proof = pickle.loads(replica_public_keys[i].verify(result_proof))
            except:
                output("Replica",self.index,":>> Key doesnot verify so terminating the replica")
                ##send(('terminate_shuttle', to = self.replicaList[index])

            output("Client",index,":>> Checking the cryptohash")
            i += 1
            if unsigned_result_proof.result != result_digest:
                output("Client",index,":>> Cryptohash is not matching so discarding the result")
                discard_flag = True
                break

        if not discard_flag:
            output("Client",index,":>> Result of operation ", operation ," is ", result)
            discard_flag = False
