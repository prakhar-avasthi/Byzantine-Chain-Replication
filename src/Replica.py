# -*- generated by 1.0.9 -*-
import da
PatternExpr_192 = da.pat.TuplePattern([da.pat.ConstantPattern('req_operation'), da.pat.FreePattern('operation'), da.pat.FreePattern('client'), da.pat.FreePattern('client_index')])
PatternExpr_222 = da.pat.TuplePattern([da.pat.ConstantPattern('forward_shuttle'), da.pat.FreePattern('replica'), da.pat.FreePattern('forward_shuttle'), da.pat.FreePattern('client')])
PatternExpr_250 = da.pat.TuplePattern([da.pat.ConstantPattern('req_operation'), da.pat.FreePattern('operation'), da.pat.FreePattern('client'), da.pat.FreePattern('client_index')])
PatternExpr_439 = da.pat.TuplePattern([da.pat.ConstantPattern('result_shuttle'), da.pat.FreePattern('replica'), da.pat.FreePattern('result_shuttle'), da.pat.FreePattern('client')])
PatternExpr_467 = da.pat.TuplePattern([da.pat.ConstantPattern('forward_shuttle'), da.pat.FreePattern('replica'), da.pat.FreePattern('forward_shuttle'), da.pat.FreePattern('client')])
PatternExpr_614 = da.pat.TuplePattern([da.pat.ConstantPattern('result_shuttle'), da.pat.FreePattern('replica'), da.pat.FreePattern('result_shuttle'), da.pat.FreePattern('client')])
PatternExpr_754 = da.pat.TuplePattern([da.pat.ConstantPattern('result_shuttle'), da.pat.FreePattern('replica'), da.pat.FreePattern('result_shuttle'), da.pat.FreePattern('client')])
_config_object = {}

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ReplicaReceivedEvent_0 = []
        self._ReplicaReceivedEvent_1 = []
        self._ReplicaReceivedEvent_3 = []
        self._ReplicaReceivedEvent_5 = []
        self._ReplicaReceivedEvent_6 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_0', PatternExpr_192, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_1', PatternExpr_222, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_2', PatternExpr_250, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_249]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_3', PatternExpr_439, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_4', PatternExpr_467, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_466]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_5', PatternExpr_614, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_6', PatternExpr_754, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, olympus, replicaList, index, type, database, **rest_777):
        super().setup(olympus=olympus, replicaList=replicaList, index=index, type=type, database=database, **rest_777)
        self._state.olympus = olympus
        self._state.replicaList = replicaList
        self._state.index = index
        self._state.type = type
        self._state.database = database
        self.output('Replica', self._state.index, ':>> Setting up Replica: ', self._state.type)

    def run(self):
        self.output('Replica', self._state.index, ':>> Replica Started: ', self._state.type)
        if (self._state.type == 'head'):
            super()._label('_st_label_189', block=False)
            client_index = client = operation = None

            def ExistentialOpExpr_190():
                nonlocal client_index, client, operation
                for (_, _, (_ConstantPattern211_, operation, client, client_index)) in self._ReplicaReceivedEvent_0:
                    if (_ConstantPattern211_ == 'req_operation'):
                        if True:
                            return True
                return False
            _st_label_189 = 0
            while (_st_label_189 == 0):
                _st_label_189 += 1
                if ExistentialOpExpr_190():
                    _st_label_189 += 1
                else:
                    super()._label('_st_label_189', block=True)
                    _st_label_189 -= 1
        else:
            super()._label('_st_label_219', block=False)
            forward_shuttle = replica = client = None

            def ExistentialOpExpr_220():
                nonlocal forward_shuttle, replica, client
                for (_, _, (_ConstantPattern240_, replica, forward_shuttle, client)) in self._ReplicaReceivedEvent_1:
                    if (_ConstantPattern240_ == 'forward_shuttle'):
                        if True:
                            return True
                return False
            _st_label_219 = 0
            while (_st_label_219 == 0):
                _st_label_219 += 1
                if ExistentialOpExpr_220():
                    _st_label_219 += 1
                else:
                    super()._label('_st_label_219', block=True)
                    _st_label_219 -= 1

    def _Replica_handler_249(self, operation, client, client_index):
        self.output('Replica', self._state.index, ':>> Received req_operation from Client', client_index)
        key = operation.command[0]
        value = operation.command[1]
        self._state.database[key] = value
        result = 'ok'
        if (self._state.type == 'head'):
            self.output('Replica', self._state.index, ':>> Operation received at head node')
            self.output('Replica', self._state.index, ':>> Head Node will assign a sequence id')
            class_action = da.import_da('Action')
            action = class_action.Action()
            action.seq_id = 1
            action.operation = operation
            order_proof_list = []
            result_proof_list = []
            class_order_proof = da.import_da('OrderProof')
            order_proof = class_order_proof.OrderProof()
            order_proof.order = 'order'
            order_proof.action = action
            order_proof_list.append(order_proof)
            class_result_proof = da.import_da('ResultProof')
            result_proof = class_result_proof.ResultProof()
            result_proof.result_const = 'result'
            result_proof.action = action
            result_proof.result = result
            result_proof_list.append(result_proof)
            class_shuttle = da.import_da('Shuttle')
            forward_shuttle = class_shuttle.Shuttle()
            forward_shuttle.action = action
            forward_shuttle.order_proof_list = order_proof_list
            forward_shuttle.result_proof_list = result_proof_list
            self.output('Replica', self._state.index, ':>> Forwarding shuttle to Replica', (self._state.index + 1))
            self.send(('forward_shuttle', self._id, forward_shuttle, client), to=self._state.replicaList[(self._state.index + 1)])
            super()._label('_st_label_436', block=False)
            replica = client = result_shuttle = None

            def ExistentialOpExpr_437():
                nonlocal replica, client, result_shuttle
                for (_, _, (_ConstantPattern457_, replica, result_shuttle, client)) in self._ReplicaReceivedEvent_3:
                    if (_ConstantPattern457_ == 'result_shuttle'):
                        if True:
                            return True
                return False
            _st_label_436 = 0
            while (_st_label_436 == 0):
                _st_label_436 += 1
                if ExistentialOpExpr_437():
                    _st_label_436 += 1
                else:
                    super()._label('_st_label_436', block=True)
                    _st_label_436 -= 1
    _Replica_handler_249._labels = None
    _Replica_handler_249._notlabels = None

    def _Replica_handler_466(self, replica, forward_shuttle, client):
        self.output('Replica', self._state.index, ':>> Received forward_shuttle from replica')
        action = forward_shuttle.action
        key = action.operation.command[0]
        value = action.operation.command[1]
        self._state.database[key] = value
        result = 'ok'
        if (self._state.type == 'normal_replica'):
            self.output('Replica', self._state.index, ':>> Replica is normal_replica')
            order_proof_list = forward_shuttle.order_proof_list
            result_proof_list = forward_shuttle.result_proof_list
            class_order_proof = da.import_da('OrderProof')
            order_proof = class_order_proof.OrderProof()
            order_proof.order = 'order'
            order_proof.action = action
            order_proof_list.append(order_proof)
            class_result_proof = da.import_da('ResultProof')
            result_proof = class_result_proof.ResultProof()
            result_proof.result_const = 'result'
            result_proof.action = action
            result_proof.result = result
            result_proof_list.append(result_proof)
            self.output('Replica', self._state.index, ':>> Forwarding shuttle to Replica: ', (self._state.index + 1))
            self.send(('forward_shuttle', self._id, forward_shuttle, client), to=self._state.replicaList[(self._state.index + 1)])
            super()._label('_st_label_611', block=False)
            client = replica = result_shuttle = None

            def ExistentialOpExpr_612():
                nonlocal client, replica, result_shuttle
                for (_, _, (_ConstantPattern631_, replica, result_shuttle, client)) in self._ReplicaReceivedEvent_5:
                    if (_ConstantPattern631_ == 'result_shuttle'):
                        if True:
                            return True
                return False
            _st_label_611 = 0
            while (_st_label_611 == 0):
                _st_label_611 += 1
                if ExistentialOpExpr_612():
                    _st_label_611 += 1
                else:
                    super()._label('_st_label_611', block=True)
                    _st_label_611 -= 1
        if (self._state.type == 'tail'):
            self.output('Replica', self._state.index, ':>> Replica is tail')
            self.send(('res_operation', result), to=client)
            self.output('Replica', self._state.index, ':>> Replied res_operation to Client')
            order_proof_list = forward_shuttle.order_proof_list
            result_proof_list = forward_shuttle.result_proof_list
            class_order_proof = da.import_da('OrderProof')
            order_proof = class_order_proof.OrderProof()
            order_proof.order = 'order'
            order_proof.action = action
            order_proof_list.append(order_proof)
            class_result_proof = da.import_da('ResultProof')
            result_proof = class_result_proof.ResultProof()
            result_proof.result_const = 'result'
            result_proof.action = action
            result_proof.result = result
            result_proof_list.append(result_proof)
            class_shuttle = da.import_da('Shuttle')
            result_shuttle = class_shuttle.Shuttle
            result_shuttle.action = 'action_to_perform'
            result_shuttle.order_proof_list = order_proof_list
            result_shuttle.result_proof_list = result_proof_list
            self.send(('result_shuttle', self._id, result_shuttle), to=self._state.replicaList[(self._state.index - 1)])
            super()._label('_st_label_751', block=False)
            client = replica = result_shuttle = None

            def ExistentialOpExpr_752():
                nonlocal client, replica, result_shuttle
                for (_, _, (_ConstantPattern770_, replica, result_shuttle, client)) in self._ReplicaReceivedEvent_6:
                    if (_ConstantPattern770_ == 'result_shuttle'):
                        if True:
                            return True
                return False
            _st_label_751 = 0
            while (_st_label_751 == 0):
                _st_label_751 += 1
                if ExistentialOpExpr_752():
                    _st_label_751 += 1
                else:
                    super()._label('_st_label_751', block=True)
                    _st_label_751 -= 1
    _Replica_handler_466._labels = None
    _Replica_handler_466._notlabels = None
