# -*- generated by 1.0.9 -*-
import da
PatternExpr_180 = da.pat.TuplePattern([da.pat.ConstantPattern('req_operation'), da.pat.FreePattern('client')])
PatternExpr_203 = da.pat.TuplePattern([da.pat.ConstantPattern('req_operation'), da.pat.FreePattern('client')])
_config_object = {}

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ReplicaReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_0', PatternExpr_180, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_1', PatternExpr_203, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_202])])

    def setup(self, olympus, replicaList, index, **rest_231):
        super().setup(olympus=olympus, replicaList=replicaList, index=index, **rest_231)
        self._state.olympus = olympus
        self._state.replicaList = replicaList
        self._state.index = index
        self.output('Replica', self._state.index, ':>> SETUP is completed')

    def run(self):
        self.output('Replica', self._state.index, ':>> Replica Started')
        super()._label('_st_label_177', block=False)
        client = None

        def ExistentialOpExpr_178():
            nonlocal client
            for (_, _, (_ConstantPattern195_, client)) in self._ReplicaReceivedEvent_0:
                if (_ConstantPattern195_ == 'req_operation'):
                    if True:
                        return True
            return False
        _st_label_177 = 0
        while (_st_label_177 == 0):
            _st_label_177 += 1
            if ExistentialOpExpr_178():
                _st_label_177 += 1
            else:
                super()._label('_st_label_177', block=True)
                _st_label_177 -= 1

    def _Replica_handler_202(self, client):
        self.output('Replica', self._state.index, ':>> Received req_operation from Client')
        result = 'yayee'
        self.send(('res_operation', result), to=client)
        self.output('Replica', self._state.index, ':>> Replied res_operation to Client')
    _Replica_handler_202._labels = None
    _Replica_handler_202._notlabels = None
