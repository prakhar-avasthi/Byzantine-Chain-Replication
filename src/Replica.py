# -*- generated by 1.0.9 -*-
import da
PatternExpr_193 = da.pat.TuplePattern([da.pat.ConstantPattern('req_operation'), da.pat.FreePattern('operation'), da.pat.FreePattern('client'), da.pat.FreePattern('client_index')])
PatternExpr_223 = da.pat.TuplePattern([da.pat.ConstantPattern('forward_shuttle'), da.pat.FreePattern('replica'), da.pat.FreePattern('forward_shuttle'), da.pat.FreePattern('client')])
PatternExpr_251 = da.pat.TuplePattern([da.pat.ConstantPattern('req_operation'), da.pat.FreePattern('operation'), da.pat.FreePattern('client'), da.pat.FreePattern('client_index')])
PatternExpr_482 = da.pat.TuplePattern([da.pat.ConstantPattern('result_shuttle'), da.pat.FreePattern('replica'), da.pat.FreePattern('result_shuttle')])
PatternExpr_508 = da.pat.TuplePattern([da.pat.ConstantPattern('forward_shuttle'), da.pat.FreePattern('replica'), da.pat.FreePattern('forward_shuttle'), da.pat.FreePattern('client')])
PatternExpr_655 = da.pat.TuplePattern([da.pat.ConstantPattern('result_shuttle'), da.pat.FreePattern('replica'), da.pat.FreePattern('result_shuttle')])
PatternExpr_801 = da.pat.TuplePattern([da.pat.ConstantPattern('forward_shuttle'), da.pat.FreePattern('replica'), da.pat.FreePattern('forward_shuttle'), da.pat.FreePattern('client')])
PatternExpr_827 = da.pat.TuplePattern([da.pat.ConstantPattern('result_shuttle'), da.pat.FreePattern('replica'), da.pat.FreePattern('result_shuttle')])
PatternExpr_867 = da.pat.TuplePattern([da.pat.ConstantPattern('req_operation'), da.pat.FreePattern('operation'), da.pat.FreePattern('client'), da.pat.FreePattern('client_index')])
PatternExpr_908 = da.pat.TuplePattern([da.pat.ConstantPattern('forward_shuttle'), da.pat.FreePattern('replica'), da.pat.FreePattern('forward_shuttle'), da.pat.FreePattern('client')])
_config_object = {}

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ReplicaReceivedEvent_0 = []
        self._ReplicaReceivedEvent_1 = []
        self._ReplicaReceivedEvent_3 = []
        self._ReplicaReceivedEvent_5 = []
        self._ReplicaReceivedEvent_6 = []
        self._ReplicaReceivedEvent_8 = []
        self._ReplicaReceivedEvent_9 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_0', PatternExpr_193, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_1', PatternExpr_223, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_2', PatternExpr_251, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_250]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_3', PatternExpr_482, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_4', PatternExpr_508, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_507]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_5', PatternExpr_655, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_6', PatternExpr_801, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_7', PatternExpr_827, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_826]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_8', PatternExpr_867, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_9', PatternExpr_908, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, olympus, replicaList, index, type, database, history, **rest_932):
        super().setup(olympus=olympus, replicaList=replicaList, index=index, type=type, database=database, history=history, **rest_932)
        self._state.olympus = olympus
        self._state.replicaList = replicaList
        self._state.index = index
        self._state.type = type
        self._state.database = database
        self._state.history = history
        self.output('Replica', self._state.index, ':>> Setting up Replica: ', self._state.type)

    def run(self):
        self.output('Replica', self._state.index, ':>> Replica Started: ', self._state.type)
        if (self._state.type == 'head'):
            super()._label('_st_label_190', block=False)
            client_index = client = operation = None

            def ExistentialOpExpr_191():
                nonlocal client_index, client, operation
                for (_, _, (_ConstantPattern212_, operation, client, client_index)) in self._ReplicaReceivedEvent_0:
                    if (_ConstantPattern212_ == 'req_operation'):
                        if True:
                            return True
                return False
            _st_label_190 = 0
            while (_st_label_190 == 0):
                _st_label_190 += 1
                if ExistentialOpExpr_191():
                    _st_label_190 += 1
                else:
                    super()._label('_st_label_190', block=True)
                    _st_label_190 -= 1
        else:
            super()._label('_st_label_220', block=False)
            replica = client = forward_shuttle = None

            def ExistentialOpExpr_221():
                nonlocal replica, client, forward_shuttle
                for (_, _, (_ConstantPattern241_, replica, forward_shuttle, client)) in self._ReplicaReceivedEvent_1:
                    if (_ConstantPattern241_ == 'forward_shuttle'):
                        if True:
                            return True
                return False
            _st_label_220 = 0
            while (_st_label_220 == 0):
                _st_label_220 += 1
                if ExistentialOpExpr_221():
                    _st_label_220 += 1
                else:
                    super()._label('_st_label_220', block=True)
                    _st_label_220 -= 1

    def _Replica_handler_250(self, operation, client, client_index):
        self.output('Replica', self._state.index, ':>> Received req_operation from Client', client_index)
        import re
        matches = re.findall("\\'(.+?)\\'", operation.command)
        self.output('Replica', self._state.index, ':>> Operation is', matches)
        key = None
        value = None
        if (not (operation.type is 2)):
            key = matches[0]
            value = matches[1]
        else:
            key = matches[0]
        self.output('Replica', self._state.index, ':>> Received value from Client', key, value)
        self._state.database[key] = value
        result = 'ok'
        if (self._state.type == 'head'):
            self.output('Replica', self._state.index, ':>> Operation received at head node')
            self.output('Replica', self._state.index, ':>> Head Node will assign a sequence id')
            class_action = da.import_da('Action')
            action = class_action.Action()
            action.seq_id = 1
            action.operation = operation
            order_proof_list = []
            result_proof_list = []
            class_order_proof = da.import_da('OrderProof')
            order_proof = class_order_proof.OrderProof()
            order_proof.order = 'order'
            order_proof.action = action
            order_proof_list.append(order_proof)
            class_result_proof = da.import_da('ResultProof')
            result_proof = class_result_proof.ResultProof()
            result_proof.result_const = 'result'
            result_proof.action = action
            result_proof.result = result
            result_proof_list.append(result_proof)
            class_shuttle = da.import_da('Shuttle')
            forward_shuttle = class_shuttle.Shuttle()
            forward_shuttle.action = action
            forward_shuttle.order_proof_list = order_proof_list
            forward_shuttle.result_proof_list = result_proof_list
            self.output('Replica', self._state.index, ':>> Forwarding shuttle to Replica', (self._state.index + 1))
            self.send(('forward_shuttle', self._id, forward_shuttle, client), to=self._state.replicaList[(self._state.index + 1)])
            super()._label('_st_label_479', block=False)
            result_shuttle = replica = None

            def ExistentialOpExpr_480():
                nonlocal result_shuttle, replica
                for (_, _, (_ConstantPattern499_, replica, result_shuttle)) in self._ReplicaReceivedEvent_3:
                    if (_ConstantPattern499_ == 'result_shuttle'):
                        if True:
                            return True
                return False
            _st_label_479 = 0
            while (_st_label_479 == 0):
                _st_label_479 += 1
                if ExistentialOpExpr_480():
                    _st_label_479 += 1
                else:
                    super()._label('_st_label_479', block=True)
                    _st_label_479 -= 1
    _Replica_handler_250._labels = None
    _Replica_handler_250._notlabels = None

    def _Replica_handler_507(self, replica, forward_shuttle, client):
        self.output('Replica', self._state.index, ':>> Received forward_shuttle from replica')
        action = forward_shuttle.action
        key = action.operation.command[0]
        value = action.operation.command[1]
        self._state.database[key] = value
        result = 'ok'
        if (self._state.type == 'normal_replica'):
            self.output('Replica', self._state.index, ':>> Replica is normal_replica')
            order_proof_list = forward_shuttle.order_proof_list
            result_proof_list = forward_shuttle.result_proof_list
            class_order_proof = da.import_da('OrderProof')
            order_proof = class_order_proof.OrderProof()
            order_proof.order = 'order'
            order_proof.action = action
            order_proof_list.append(order_proof)
            class_result_proof = da.import_da('ResultProof')
            result_proof = class_result_proof.ResultProof()
            result_proof.result_const = 'result'
            result_proof.action = action
            result_proof.result = result
            result_proof_list.append(result_proof)
            self.output('Replica', self._state.index, ':>> Forwarding shuttle to Replica: ', (self._state.index + 1))
            self.send(('forward_shuttle', self._id, forward_shuttle, client), to=self._state.replicaList[(self._state.index + 1)])
            super()._label('_st_label_652', block=False)
            replica = result_shuttle = None

            def ExistentialOpExpr_653():
                nonlocal replica, result_shuttle
                for (_, _, (_ConstantPattern671_, replica, result_shuttle)) in self._ReplicaReceivedEvent_5:
                    if (_ConstantPattern671_ == 'result_shuttle'):
                        if True:
                            return True
                return False
            _st_label_652 = 0
            while (_st_label_652 == 0):
                _st_label_652 += 1
                if ExistentialOpExpr_653():
                    _st_label_652 += 1
                else:
                    super()._label('_st_label_652', block=True)
                    _st_label_652 -= 1
        if (self._state.type == 'tail'):
            self.output('Replica', self._state.index, ':>> Replica is tail')
            self.send(('res_operation', result), to=client)
            self.output('Replica', self._state.index, ':>> Replied res_operation to Client')
            order_proof_list = forward_shuttle.order_proof_list
            result_proof_list = forward_shuttle.result_proof_list
            class_order_proof = da.import_da('OrderProof')
            order_proof = class_order_proof.OrderProof()
            order_proof.order = 'order'
            order_proof.action = action
            order_proof_list.append(order_proof)
            class_result_proof = da.import_da('ResultProof')
            result_proof = class_result_proof.ResultProof()
            result_proof.result_const = 'result'
            result_proof.action = action
            result_proof.result = result
            result_proof_list.append(result_proof)
            class_shuttle = da.import_da('Shuttle')
            result_shuttle = class_shuttle.Shuttle()
            self.output('Replica', self._state.index, ':>> Inserting action in result shuttle', action)
            result_shuttle.action = action
            result_shuttle.order_proof_list = order_proof_list
            result_shuttle.result_proof_list = result_proof_list
            self.send(('result_shuttle', self._id, result_shuttle), to=self._state.replicaList[(self._state.index - 1)])
            super()._label('_st_label_798', block=False)
            client = forward_shuttle = replica = None

            def ExistentialOpExpr_799():
                nonlocal client, forward_shuttle, replica
                for (_, _, (_ConstantPattern817_, replica, forward_shuttle, client)) in self._ReplicaReceivedEvent_6:
                    if (_ConstantPattern817_ == 'forward_shuttle'):
                        if True:
                            return True
                return False
            _st_label_798 = 0
            while (_st_label_798 == 0):
                _st_label_798 += 1
                if ExistentialOpExpr_799():
                    _st_label_798 += 1
                else:
                    super()._label('_st_label_798', block=True)
                    _st_label_798 -= 1
    _Replica_handler_507._labels = None
    _Replica_handler_507._notlabels = None

    def _Replica_handler_826(self, replica, result_shuttle):
        self.output('Replica', self._state.index, ':>> Received result_shuttle from next replica')
        action = result_shuttle.action
        self._state.history[action] = result_shuttle
        self.output('Replica', self._state.index, ':>> Added result shuttle into its history')
        if (self._state.type == 'head'):
            super()._label('_st_label_864', block=False)
            operation = client_index = client = None

            def ExistentialOpExpr_865():
                nonlocal operation, client_index, client
                for (_, _, (_ConstantPattern886_, operation, client, client_index)) in self._ReplicaReceivedEvent_8:
                    if (_ConstantPattern886_ == 'req_operation'):
                        if True:
                            return True
                return False
            _st_label_864 = 0
            while (_st_label_864 == 0):
                _st_label_864 += 1
                if ExistentialOpExpr_865():
                    _st_label_864 += 1
                else:
                    super()._label('_st_label_864', block=True)
                    _st_label_864 -= 1
        else:
            self.send(('result_shuttle', self._id, result_shuttle), to=self._state.replicaList[(self._state.index - 1)])
            super()._label('_st_label_905', block=False)
            replica = forward_shuttle = client = None

            def ExistentialOpExpr_906():
                nonlocal replica, forward_shuttle, client
                for (_, _, (_ConstantPattern925_, replica, forward_shuttle, client)) in self._ReplicaReceivedEvent_9:
                    if (_ConstantPattern925_ == 'forward_shuttle'):
                        if True:
                            return True
                return False
            _st_label_905 = 0
            while (_st_label_905 == 0):
                _st_label_905 += 1
                if ExistentialOpExpr_906():
                    _st_label_905 += 1
                else:
                    super()._label('_st_label_905', block=True)
                    _st_label_905 -= 1
    _Replica_handler_826._labels = None
    _Replica_handler_826._notlabels = None
