# -*- generated by 1.0.9 -*-
import da
PatternExpr_185 = da.pat.TuplePattern([da.pat.ConstantPattern('req_operation'), da.pat.FreePattern('client')])
PatternExpr_207 = da.pat.TuplePattern([da.pat.ConstantPattern('forward_shuttle'), da.pat.FreePattern('replica'), da.pat.FreePattern('forward_shuttle'), da.pat.FreePattern('client')])
PatternExpr_235 = da.pat.TuplePattern([da.pat.ConstantPattern('req_operation'), da.pat.FreePattern('client')])
PatternExpr_372 = da.pat.TuplePattern([da.pat.ConstantPattern('forward_shuttle'), da.pat.FreePattern('replica'), da.pat.FreePattern('forward_shuttle'), da.pat.FreePattern('client')])
_config_object = {}

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ReplicaReceivedEvent_0 = []
        self._ReplicaReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_0', PatternExpr_185, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_1', PatternExpr_207, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_2', PatternExpr_235, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_234]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_3', PatternExpr_372, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_371])])

    def setup(self, olympus, replicaList, index, type, **rest_600):
        super().setup(olympus=olympus, replicaList=replicaList, index=index, type=type, **rest_600)
        self._state.olympus = olympus
        self._state.replicaList = replicaList
        self._state.index = index
        self._state.type = type
        self.output('Replica', self._state.index, ':>> SETUP is completed')

    def run(self):
        self.output('Replica', self._state.index, ':>> Replica Started: ', self._state.type)
        super()._label('_st_label_181', block=False)
        client = None

        def ExistentialOpExpr_183():
            nonlocal client
            for (_, _, (_ConstantPattern200_, client)) in self._ReplicaReceivedEvent_0:
                if (_ConstantPattern200_ == 'req_operation'):
                    if True:
                        return True
            return False
        forward_shuttle = replica = client = None

        def ExistentialOpExpr_205():
            nonlocal forward_shuttle, replica, client
            for (_, _, (_ConstantPattern225_, replica, forward_shuttle, client)) in self._ReplicaReceivedEvent_1:
                if (_ConstantPattern225_ == 'forward_shuttle'):
                    if True:
                        return True
            return False
        _st_label_181 = 0
        while (_st_label_181 == 0):
            _st_label_181 += 1
            if (ExistentialOpExpr_183() or ExistentialOpExpr_205()):
                _st_label_181 += 1
            else:
                super()._label('_st_label_181', block=True)
                _st_label_181 -= 1

    def _Replica_handler_234(self, client):
        self.output('Replica', self._state.index, ':>> Received req_operation from Client')
        result = 'yayee'
        if (self._state.type == 'head'):
            self.output('Replica', self._state.index, ':>>Operation received at head node')
            order_proof_list = []
            result_proof_list = []
            class_order_proof = da.import_da('OrderProof')
            order_proof = class_order_proof.OrderProof()
            order_proof.order = 'order'
            order_proof.action = 'action_to_perform'
            order_proof_list.append(order_proof)
            class_result_proof = da.import_da('ResultProof')
            result_proof = class_result_proof.ResultProof()
            result_proof.result_const = 'result'
            result_proof.action = 'action_to_perform'
            result_proof.result = result
            result_proof_list.append(result_proof)
            class_shuttle = da.import_da('Shuttle')
            forward_shuttle = class_shuttle.Shuttle()
            forward_shuttle.action = 'action_to_perform'
            forward_shuttle.order_proof_list = order_proof_list
            forward_shuttle.result_proof_list = result_proof_list
            self.output('Replica', self._state.index, ':>> Forwarding shuttle to Replica', (self._state.index + 1))
            self.send(('forward_shuttle', self._id, forward_shuttle, client), to=self._state.replicaList[(self._state.index + 1)])
    _Replica_handler_234._labels = None
    _Replica_handler_234._notlabels = None

    def _Replica_handler_371(self, replica, forward_shuttle, client):
        self.output('Replica', self._state.index, ':>> Received forward_shuttle from replica')
        result = 'yayee'
        if (self._state.type == 'normal_replica'):
            self.output('Replica', self._state.index, ':>> Replica is normal_replica')
            order_proof_list = forward_shuttle.order_proof_list
            result_proof_list = forward_shuttle.result_proof_list
            class_order_proof = da.import_da('OrderProof')
            order_proof = class_order_proof.OrderProof()
            order_proof.order = 'order'
            order_proof.action = 'action_to_perform'
            order_proof_list.append(order_proof)
            class_result_proof = da.import_da('ResultProof')
            result_proof = class_result_proof.ResultProof()
            result_proof.result_const = 'result'
            result_proof.action = 'action_to_perform'
            result_proof.result = result
            result_proof_list.append(result_proof)
            self.output('Replica', self._state.index, ':>> Forwarding shuttle to Replica: ', (self._state.index + 1))
            self.send(('forward_shuttle', self._id, forward_shuttle, client), to=self._state.replicaList[(self._state.index + 1)])
        if (self._state.type == 'tail'):
            self.output('Replica', self._state.index, ':>> Replica is tail')
            self.send(('res_operation', result), to=client)
            self.output('Replica', self._state.index, ':>> Replied res_operation to Client')
            order_proof_list = forward_shuttle.order_proof_list
            result_proof_list = forward_shuttle.result_proof_list
            class_order_proof = da.import_da('OrderProof')
            order_proof = class_order_proof.OrderProof()
            order_proof.order = 'order'
            order_proof.action = 'action_to_perform'
            order_proof_list.append(order_proof)
            class_result_proof = da.import_da('ResultProof')
            result_proof = class_result_proof.ResultProof()
            result_proof.result_const = 'result'
            result_proof.action = 'action_to_perform'
            result_proof.result = result
            result_proof_list.append(result_proof)
            class_shuttle = da.import_da('Shuttle')
            result_shuttle = class_shuttle.Shuttle
            result_shuttle.action = 'action_to_perform'
            result_shuttle.order_proof_list = order_proof_list
            result_shuttle.result_proof_list = result_proof_list
            self.send(('result_shuttle', self._id, result_shuttle), to=self._state.replicaList[(self._state.index - 1)])
    _Replica_handler_371._labels = None
    _Replica_handler_371._notlabels = None
