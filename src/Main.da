import nacl.encoding
import nacl.signing
import nacl.hash

class Olympus(process):
    def setup(num_replica, head_timeout, nonhead_timeout):
        output("Olympus:>> Setup")
        class_config = import_da('Configuration')
        self.config = class_config.Configuration()
        self.replica_public_keys = []


    def run():
        output("Olympus:>> Started")
        await(some(received(('terminate_olympus'))))


    def receive(msg = ('req_get_current_configuration', client)):
        output("Olympus:>> Received req_get_current_configuration from Client")
        if self.config.config_id is None or self.config.config_id is None:
            output("Olympus:>> Configuration is NONE")
            makeNewConfiguration()

        output("Olympus:>> Replying res_get_current_configuration with configuration")
        send(('res_get_current_configuration', self.config, self.replica_public_keys), to=client)


    def makeNewConfiguration():
        output("Olympus:>> Making New Configuration")
        if self.config.config_id is None:
            self.config.config_id = 1
        else:
            self.config.config_id += 1

        class_replica = import_da('Replica')
        replicaList = new(class_replica.Replica, num= self.num_replica)

        ##output("Olympus:>> Setting up Replicas with : ", signing_key)

        public_keys = []
        private_keys = []

        for i in range(len(replicaList)):
            signing_key = nacl.signing.SigningKey.generate()
            private_keys.append(signing_key)
            public_keys.append(signing_key.verify_key)

        i = 0
        for replica in replicaList:
            if i is 0:
                setup(replica, args=(self, list(replicaList), i, 'head', dict(), dict(), public_keys, private_keys[i], head_timeout, 'PENDING'))
            elif i is num_replica-1:
                setup(replica, args=(self, list(replicaList), i, 'tail', dict(), dict(), public_keys, private_keys[i], nonhead_timeout, 'PENDING'))
            else:
                setup(replica, args=(self, list(replicaList), i, 'normal_replica', dict(), dict(),  public_keys, private_keys[i], nonhead_timeout, 'PENDING'))
            i += 1
        self.config.list_replica = list(replicaList)
        self.replica_public_keys = public_keys
        start(replicaList)

def main():
    config = {}
    with open('config.txt','r') as f:
      for line in f:
          if line[0] != '#':
            (key,sep,val) = line.partition('=')
            # if the line does not contain '=', it is invalid and hence ignored
            if len(sep) != 0:
                val = val.strip()
                config[key.strip()] = int(val) if str.isdecimal(val) else val

    #class_olympus = import_da('Olympus')
    class_client = import_da('Client')
    num_replica = 2 * config['t'] + 1

    olympus = new(Olympus, args=(num_replica, config['head_timeout'], config['nonhead_timeout']), at='OlympusNode')
    clientList = new(class_client.Client, num= config['num_client'])
    i = 0
    for client in clientList:
        load = 'workload[' + str(i) + ']'
        setup(client, args=(olympus, i, config[str(load)], config['client_timeout']))
        i += 1

    config(channel = Fifo, clock = Lamport)
    start(olympus)
    start(clientList)
