import pickle
import nacl.encoding
import nacl.signing
import nacl.hash

class Replica(process):
    ##[TODO: take more parameters for the code to run successfully]
    def setup(olympus, replicaList, index, type, database, history, public_keys, private_key, timeout): pass

    def run():
        output("Replica",self.index,":>> Replica Started with a private key: ", self.type)
        await(some(received(('terminate_replica'))))


    def performOperation(operation):
        output("Replica",self.index,":>> perform operation: ", operation.command)
        import re
        matches = re.findall(r"\'(.+?)\'", operation.command)

        key = None
        value = None

        if not operation.type is 2 :
            key = matches[0]
            value = matches[1]
        else:
            key = matches[0]

        if operation.type is 1:
            self.database[key] = value
            return 'OK'
        elif operation.type is 2:
            if key in self.database:
                return self.database[key]
            else:
                return ''
        elif operation.type is 3:
            limit = value.split(':')
            if key in self.database and len(self.database[key]) >= int(limit[1]):
                val = self.database[key]
                self.database[key] = val[int(limit[0]):int(limit[1])]
                return 'OK'
            else:
                return 'FAIL'
        elif operation.type is 4:
            if key in self.database:
                val = self.database[key]
                list_val = val+value
                self.database[key] = list_val
                return 'OK'
            else:
                return 'FAIL'


    def receive(msg = ('req_operation', operation, client, client_index)):
        output("[Replica",self.index,":<<] Received req_operation from Client", client_index, " operation: ", operation.command)
        result = performOperation(operation)

        ## If the replica is head node, it will create a forward shuttle
        if self.type == 'head' :
            class_action = import_da('Action')
            action = class_action.Action()
            action.seq_id = 1
            action.operation = operation
            order_proof_list = []
            result_proof_list = []

            class_order_proof = import_da('OrderProof')
            order_proof = class_order_proof.OrderProof()
            order_proof.order = "order"
            order_proof.action = action

            # signing order proof
            signed_order_proof = self.private_key.sign(pickle.dumps(order_proof))

            order_proof_list.append(signed_order_proof)
            ##output("Replica",self.index,":>> Successfully signed and appended order_proof", signed_order_proof)

            class_result_proof = import_da('ResultProof')
            result_proof = class_result_proof.ResultProof()
            result_proof.result_const = "result"
            result_proof.action = action

            ## calculate the result digest
            HASHER = nacl.hash.sha256
            result_byte = pickle.dumps(result)
            result_digest = HASHER(result_byte, encoder=nacl.encoding.HexEncoder)

            result_proof.result= result_digest
            result_proof_list.append(result_proof)

            class_shuttle = import_da('Shuttle')
            forward_shuttle = class_shuttle.Shuttle()
            forward_shuttle.action = action
            forward_shuttle.order_proof_list = order_proof_list
            forward_shuttle.result_proof_list = result_proof_list
            output("[Replica",self.index,":>>] Forwarding shuttle to Replica",index+1, " operation: ", action.operation.command)
            send(('forward_shuttle', self, forward_shuttle, client), to = self.replicaList[index + 1])
            if(await(some(received(('result_shuttle', replica, result_shuttle))))): pass
            elif timeout(timeout):
                output("Replica",self.index,":>> Replica timedout")


    def receive(msg = ('forward_shuttle', replica, forward_shuttle, client)):
        action = forward_shuttle.action
        output("[Replica",self.index,":<<] Received forward_shuttle from previous replica, operation: ", action.operation.command)
        result = performOperation(action.operation)

        ## fetch result proof and order proof list from the forward shuttle
        order_proof_list = forward_shuttle.order_proof_list
        result_proof_list = forward_shuttle.result_proof_list

        ##validating the orderproof
        for i in range(len(order_proof_list)) :
            try:
                public_keys[i].verify(order_proof_list[i])
            except:
                output("[Replica",self.index,":>>] Key doesnot verify so terminating the replica")
                ##send(('terminate_shuttle', to = self.replicaList[index])

        ## normal replica will fetch the order and result proof list and add its own and send to next replica
        if type == 'normal_replica' :

            verify_key = self.private_key.verify_key

            ## make its own order proof and append it to the order proof list
            class_order_proof = import_da('OrderProof')
            order_proof = class_order_proof.OrderProof()
            order_proof.order = "order"
            order_proof.action = action
            signed_order_proof = self.private_key.sign(pickle.dumps(order_proof))
            order_proof_list.append(signed_order_proof)

            ## make its own result proof and append it to the result proof list
            class_result_proof = import_da('ResultProof')
            result_proof = class_result_proof.ResultProof()
            result_proof.result_const = "result"
            result_proof.action = action

            ## calculate the result digest
            HASHER = nacl.hash.sha256
            result_byte = pickle.dumps(result)
            result_digest = HASHER(result_byte, encoder=nacl.encoding.HexEncoder)

            result_proof.result= result_digest
            result_proof_list.append(result_proof)

            ## send the shuttle to next replica
            output("[Replica",self.index,":>>] Forwarding shuttle to Replica: ", index+1, " operation: ", action.operation.command)
            send(('forward_shuttle', self, forward_shuttle, client), to = self.replicaList[index + 1])
            if(await(some(received(('result_shuttle', replica, result_shuttle))))): pass
            elif timeout(timeout):
                output("Replica",self.index,":>> Replica timedout")

        ## If replica is a tail node, it will create a result shuttle
        if type == 'tail' :

            ## make its own order proof and append it to the order proof list
            class_order_proof = import_da('OrderProof')
            order_proof = class_order_proof.OrderProof()
            order_proof.order = "order"
            order_proof.action = action
            order_proof_list.append(order_proof)

            ## make its own result proof and append it to the result proof list
            class_result_proof = import_da('ResultProof')
            result_proof = class_result_proof.ResultProof()
            result_proof.result_const = "result"
            result_proof.action = action

            ## calculate the result digest
            HASHER = nacl.hash.sha256
            result_byte = pickle.dumps(result)
            result_digest = HASHER(result_byte, encoder=nacl.encoding.HexEncoder)

            result_proof.result= result_digest
            result_proof_list.append(result_proof)

            ## send result to client
            send(('res_operation', action.operation, result, forward_shuttle.result_proof_list), to=client)
            output("[Replica",self.index,":>>] Replied res_operation to CLIENT: ", action.operation.command, " result: ", result)

            ## make a new result shuttle
            class_shuttle = import_da('Shuttle')
            result_shuttle = class_shuttle.Shuttle()
            result_shuttle.action = action
            result_shuttle.result = result
            result_shuttle.order_proof_list = order_proof_list
            result_shuttle.result_proof_list = result_proof_list
            output("[Replica",self.index,":>>] Sending result shuttle back to replica: ", index-1, " operation: ", action.operation.command)
            send(('result_shuttle', self, result_shuttle), to = self.replicaList[index - 1])

            if( await(some(received(('forward_shuttle', replica, forward_shuttle, client))))):pass
            elif timeout(timeout):
                output("Replica",self.index,":>> Replica timedout")


    # on receiving result shuttle replica will store result shuttle into its cache and start awaiting for forward shuttle
    def receive(msg = ('result_shuttle', replica, result_shuttle)):
        action = result_shuttle.action
        self.history[action] = result_shuttle
        output("[Replica",self.index,":<<] Received result_shuttle from previous replica: ", action.operation.command)

        if not type == 'head':
            ## send the shuttle to next replica
            output("[Replica",self.index,":>>] Sending result shuttle back to replica: ", index-1, " operation: ", action.operation.command)
            send(('result_shuttle', self, result_shuttle), to = replicaList[index - 1])
            if( await(some(received(('forward_shuttle', replica, forward_shuttle, client))))):pass
            elif timeout(timeout):
                output("Replica",self.index,":>> Replica timedout")


    def receive(msg = ('req_operation_timeout', operation, client, client_index)):
        output("Replica",self.index,":<< DIRECT REQUEST FROM CLIENT: ", client_index, "for operation: ", operation.command)
        found = False
        for action in self.history.keys():
            if action.operation.client_request_id == operation.client_request_id:
                if action.operation.command == operation.command:
                    if action.operation.type == operation.type:
                        result_shuttle = self.history[action]
                        send(('res_operation_timeout', operation, result_shuttle.result, result_shuttle.result_proof_list), to=client)
                        found = True
                        break
        if found == False and not self.type == 'head':
            send(('req_operation_timeout', operation, client, client_index), to=self.replicaList[0])
