# -*- generated by 1.0.9 -*-
import da
PatternExpr_192 = da.pat.TuplePattern([da.pat.ConstantPattern('res_get_current_configuration'), da.pat.FreePattern('config_id'), da.pat.FreePattern('current_configuration')])
PatternExpr_233 = da.pat.TuplePattern([da.pat.ConstantPattern('res_operation'), da.pat.FreePattern('result')])
PatternExpr_256 = da.pat.TuplePattern([da.pat.ConstantPattern('res_get_current_configuration'), da.pat.FreePattern('config_id'), da.pat.FreePattern('current_configuration')])
PatternExpr_276 = da.pat.TuplePattern([da.pat.ConstantPattern('res_operation'), da.pat.FreePattern('result')])
_config_object = {}

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ClientReceivedEvent_0 = []
        self._ClientReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_192, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_233, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_2', PatternExpr_256, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_255]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_3', PatternExpr_276, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_275])])

    def setup(self, olympus, **rest_287):
        super().setup(olympus=olympus, **rest_287)
        self._state.olympus = olympus
        self._state.headNode = None

    def run(self):
        self.output('Client:>> Started')
        if (self._state.headNode is None):
            self.output('Client:>> Current Configuration is None')
            self.output('Client:>> Sending req_get_current_configuration to Olympus')
            self.send(('req_get_current_configuration', self._id), to=self._state.olympus)
            self.output('Client:>> Waiting for res_get_current_configuration from Olympus')
            super()._label('_st_label_189', block=False)
            config_id = current_configuration = None

            def ExistentialOpExpr_190():
                nonlocal config_id, current_configuration
                for (_, _, (_ConstantPattern209_, config_id, current_configuration)) in self._ClientReceivedEvent_0:
                    if (_ConstantPattern209_ == 'res_get_current_configuration'):
                        if True:
                            return True
                return False
            _st_label_189 = 0
            while (_st_label_189 == 0):
                _st_label_189 += 1
                if ExistentialOpExpr_190():
                    _st_label_189 += 1
                else:
                    super()._label('_st_label_189', block=True)
                    _st_label_189 -= 1
            self.output('Client:>> Ready to perform operation')
        self.output('Client:>> Already have headnode')
        self.send(('req_operation', self._id), to=self._state.headNode[0])
        super()._label('_st_label_230', block=False)
        result = None

        def ExistentialOpExpr_231():
            nonlocal result
            for (_, _, (_ConstantPattern248_, result)) in self._ClientReceivedEvent_1:
                if (_ConstantPattern248_ == 'res_operation'):
                    if True:
                        return True
            return False
        _st_label_230 = 0
        while (_st_label_230 == 0):
            _st_label_230 += 1
            if ExistentialOpExpr_231():
                _st_label_230 += 1
            else:
                super()._label('_st_label_230', block=True)
                _st_label_230 -= 1

    def _Client_handler_255(self, config_id, current_configuration):
        self.output('Client:>> Received res_get_current_configuration from Olympus')
        self._state.headNode = current_configuration
        self.output('Client:>> currentConfiguration Updated')
    _Client_handler_255._labels = None
    _Client_handler_255._notlabels = None

    def _Client_handler_275(self, result):
        self.output('Client:>> Received res_operation from Replica')
        self.output('Client:>> Result of operation is ', result)
    _Client_handler_275._labels = None
    _Client_handler_275._notlabels = None
