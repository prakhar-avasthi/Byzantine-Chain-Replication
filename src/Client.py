# -*- generated by 1.0.9 -*-
import da
PatternExpr_226 = da.pat.TuplePattern([da.pat.ConstantPattern('res_get_current_configuration'), da.pat.FreePattern('config')])
PatternExpr_399 = da.pat.TuplePattern([da.pat.ConstantPattern('res_operation'), da.pat.FreePattern('result')])
PatternExpr_422 = da.pat.TuplePattern([da.pat.ConstantPattern('res_get_current_configuration'), da.pat.FreePattern('config')])
PatternExpr_444 = da.pat.TuplePattern([da.pat.ConstantPattern('res_operation'), da.pat.FreePattern('result')])
_config_object = {}

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ClientReceivedEvent_0 = []
        self._ClientReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_226, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_399, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_2', PatternExpr_422, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_421]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_3', PatternExpr_444, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_443])])

    def setup(self, olympus, index, workload, **rest_459):
        super().setup(olympus=olympus, index=index, workload=workload, **rest_459)
        self._state.olympus = olympus
        self._state.index = index
        self._state.workload = workload
        self._state.config = None
        self.output('Client', self._state.index, ':>> workload: ', self._state.workload)
        self._state.operations = None
        if (not ('random' in self._state.workload)):
            self._state.operations = self._state.workload.split(';')

    def run(self):
        self.output('Client', self._state.index, ':>> Started')
        if (self._state.config is None):
            self.output('Client', self._state.index, ':>> Current Configuration is None')
            self.output('Client', self._state.index, ':>> Sending req_get_current_configuration to Olympus')
            self.send(('req_get_current_configuration', self._id), to=self._state.olympus)
            self.output('Client', self._state.index, ':>> Waiting for res_get_current_configuration from Olympus')
            super()._label('_st_label_223', block=False)
            config = None

            def ExistentialOpExpr_224():
                nonlocal config
                for (_, _, (_ConstantPattern240_, self._state.config)) in self._ClientReceivedEvent_0:
                    if (_ConstantPattern240_ == 'res_get_current_configuration'):
                        if True:
                            return True
                return False
            _st_label_223 = 0
            while (_st_label_223 == 0):
                _st_label_223 += 1
                if ExistentialOpExpr_224():
                    _st_label_223 += 1
                else:
                    super()._label('_st_label_223', block=True)
                    _st_label_223 -= 1
            self.output('Client', self._state.index, ':>> Ready to perform operation')
        self.output('Client', self._state.index, ':>> Already have headnode')
        if (not (self._state.operations is None)):
            for command in self._state.operations:
                command = command.strip()
                self.output('Client', self._state.index, ':>> Command: ', command)
                class_operation = da.import_da('Operation')
                operation = class_operation.Operation()
                operation.client_request_id = self._state.index
                if ('put' in command):
                    operation.type = 1
                    operation.command = command[3:]
                    self.output('Client', self._state.index, ':>> operation.command ', operation.command)
                elif ('get' in command):
                    operation.type = 2
                    operation.command = command[3:]
                    self.output('Client', self._state.index, ':>> operation.command ', operation.command)
                elif ('slice' in command):
                    operation.type = 3
                    operation.command = command[5:]
                    self.output('Client', self._state.index, ':>> operation.command ', operation.command)
                elif ('append' in command):
                    operation.type = 4
                    operation.command = command[6:]
                    self.output('Client', self._state.index, ':>> operation.command ', operation.command)
                self.output('Client', self._state.index, ':>> Sending operation to Head Node')
                self.send(('req_operation', operation, self._id, self._state.index), to=self._state.config.list_replica[0])
                super()._label('_st_label_396', block=False)
                result = None

                def ExistentialOpExpr_397():
                    nonlocal result
                    for (_, _, (_ConstantPattern414_, result)) in self._ClientReceivedEvent_1:
                        if (_ConstantPattern414_ == 'res_operation'):
                            if True:
                                return True
                    return False
                _st_label_396 = 0
                while (_st_label_396 == 0):
                    _st_label_396 += 1
                    if ExistentialOpExpr_397():
                        _st_label_396 += 1
                    else:
                        super()._label('_st_label_396', block=True)
                        _st_label_396 -= 1
                else:
                    if (_st_label_396 != 2):
                        continue
                if (_st_label_396 != 2):
                    break

    def _Client_handler_421(self, config):
        self.output('Client', self._state.index, ':>> Received res_get_current_configuration from Olympus')
        self._state.config = config
        self.output('Client', self._state.index, ':>> current Configuration Updated')
    _Client_handler_421._labels = None
    _Client_handler_421._notlabels = None

    def _Client_handler_443(self, result):
        self.output('Client', self._state.index, ':>> Received res_operation from Replica')
        self.output('Client', self._state.index, ':>> Result of operation is ', result)
    _Client_handler_443._labels = None
    _Client_handler_443._notlabels = None
