# -*- generated by 1.0.9 -*-
import da
PatternExpr_201 = da.pat.TuplePattern([da.pat.ConstantPattern('res_get_current_configuration'), da.pat.FreePattern('config')])
PatternExpr_272 = da.pat.TuplePattern([da.pat.ConstantPattern('res_operation'), da.pat.FreePattern('result')])
PatternExpr_295 = da.pat.TuplePattern([da.pat.ConstantPattern('res_get_current_configuration'), da.pat.FreePattern('config')])
PatternExpr_317 = da.pat.TuplePattern([da.pat.ConstantPattern('res_operation'), da.pat.FreePattern('result')])
_config_object = {}

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ClientReceivedEvent_0 = []
        self._ClientReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_201, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_272, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_2', PatternExpr_295, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_294]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_3', PatternExpr_317, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_316])])

    def setup(self, olympus, index, **rest_332):
        super().setup(olympus=olympus, index=index, **rest_332)
        self._state.olympus = olympus
        self._state.index = index
        self._state.config = None

    def run(self):
        self.output('Client', self._state.index, ':>> Started')
        if (self._state.config is None):
            self.output('Client', self._state.index, ':>> Current Configuration is None')
            self.output('Client', self._state.index, ':>> Sending req_get_current_configuration to Olympus')
            self.send(('req_get_current_configuration', self._id), to=self._state.olympus)
            self.output('Client', self._state.index, ':>> Waiting for res_get_current_configuration from Olympus')
            super()._label('_st_label_198', block=False)
            config = None

            def ExistentialOpExpr_199():
                nonlocal config
                for (_, _, (_ConstantPattern215_, self._state.config)) in self._ClientReceivedEvent_0:
                    if (_ConstantPattern215_ == 'res_get_current_configuration'):
                        if True:
                            return True
                return False
            _st_label_198 = 0
            while (_st_label_198 == 0):
                _st_label_198 += 1
                if ExistentialOpExpr_199():
                    _st_label_198 += 1
                else:
                    super()._label('_st_label_198', block=True)
                    _st_label_198 -= 1
            self.output('Client', self._state.index, ':>> Ready to perform operation')
        self.output('Client', self._state.index, ':>> Already have headnode')
        class_operation = da.import_da('Operation')
        operation = class_operation.Operation()
        operation.client_request_id = self._state.index
        operation.command = ('stony', 'brook')
        self.output('Client', self._state.index, ':>> Sending operation to Head Node')
        self.send(('req_operation', operation, self._id, self._state.index), to=self._state.config.list_replica[0])
        super()._label('_st_label_269', block=False)
        result = None

        def ExistentialOpExpr_270():
            nonlocal result
            for (_, _, (_ConstantPattern287_, result)) in self._ClientReceivedEvent_1:
                if (_ConstantPattern287_ == 'res_operation'):
                    if True:
                        return True
            return False
        _st_label_269 = 0
        while (_st_label_269 == 0):
            _st_label_269 += 1
            if ExistentialOpExpr_270():
                _st_label_269 += 1
            else:
                super()._label('_st_label_269', block=True)
                _st_label_269 -= 1

    def _Client_handler_294(self, config):
        self.output('Client', self._state.index, ':>> Received res_get_current_configuration from Olympus')
        self._state.config = config
        self.output('Client', self._state.index, ':>> current Configuration Updated')
    _Client_handler_294._labels = None
    _Client_handler_294._notlabels = None

    def _Client_handler_316(self, result):
        self.output('Client', self._state.index, ':>> Received res_operation from Replica')
        self.output('Client', self._state.index, ':>> Result of operation is ', result)
    _Client_handler_316._labels = None
    _Client_handler_316._notlabels = None
