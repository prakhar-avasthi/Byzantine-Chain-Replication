# -*- generated by 1.0.9 -*-
import da
PatternExpr_214 = da.pat.TuplePattern([da.pat.ConstantPattern('res_get_current_configuration'), da.pat.FreePattern('config')])
PatternExpr_352 = da.pat.ConstantPattern('terminate_client')
PatternExpr_370 = da.pat.TuplePattern([da.pat.ConstantPattern('res_get_current_configuration'), da.pat.FreePattern('config')])
PatternExpr_384 = da.pat.TuplePattern([da.pat.ConstantPattern('res_operation'), da.pat.FreePattern('operation'), da.pat.FreePattern('result')])
_config_object = {}

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ClientReceivedEvent_0 = []
        self._ClientReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_214, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_352, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_2', PatternExpr_370, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_369]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_3', PatternExpr_384, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_383])])

    def setup(self, olympus, index, workload, **rest_399):
        super().setup(olympus=olympus, index=index, workload=workload, **rest_399)
        self._state.olympus = olympus
        self._state.index = index
        self._state.workload = workload
        self._state.config = None
        self.output('Client', self._state.index, ':>> workload: ', self._state.workload)
        self._state.operations = None
        if (not ('random' in self._state.workload)):
            self._state.operations = self._state.workload.split(';')

    def run(self):
        self.output('Client', self._state.index, ':>> Started')
        if (self._state.config is None):
            self.send(('req_get_current_configuration', self._id), to=self._state.olympus)
            super()._label('_st_label_211', block=False)
            config = None

            def ExistentialOpExpr_212():
                nonlocal config
                for (_, _, (_ConstantPattern228_, self._state.config)) in self._ClientReceivedEvent_0:
                    if (_ConstantPattern228_ == 'res_get_current_configuration'):
                        if True:
                            return True
                return False
            _st_label_211 = 0
            while (_st_label_211 == 0):
                _st_label_211 += 1
                if ExistentialOpExpr_212():
                    _st_label_211 += 1
                else:
                    super()._label('_st_label_211', block=True)
                    _st_label_211 -= 1
        if (not (self._state.operations is None)):
            for command in self._state.operations:
                command = command.strip()
                class_operation = da.import_da('Operation')
                operation = class_operation.Operation()
                operation.client_request_id = self._state.index
                if ('put' in command):
                    operation.type = 1
                    operation.command = command[3:]
                elif ('get' in command):
                    operation.type = 2
                    operation.command = command[3:]
                elif ('slice' in command):
                    operation.type = 3
                    operation.command = command[5:]
                elif ('append' in command):
                    operation.type = 4
                    operation.command = command[6:]
                self.output('Client', self._state.index, ':>> Sending operation to Head Node: ', operation.command)
                self.send(('req_operation', operation, self._id, self._state.index), to=self._state.config.list_replica[0])
        super()._label('_st_label_349', block=False)

        def ExistentialOpExpr_350():
            for (_, _, _ConstantPattern363_) in self._ClientReceivedEvent_1:
                if (_ConstantPattern363_ == 'terminate_client'):
                    if True:
                        return True
            return False
        _st_label_349 = 0
        while (_st_label_349 == 0):
            _st_label_349 += 1
            if ExistentialOpExpr_350():
                _st_label_349 += 1
            else:
                super()._label('_st_label_349', block=True)
                _st_label_349 -= 1

    def _Client_handler_369(self, config):
        self._state.config = config
    _Client_handler_369._labels = None
    _Client_handler_369._notlabels = None

    def _Client_handler_383(self, operation, result):
        self.output('Client', self._state.index, ':>> Result of operation ', operation, ' is ', result)
    _Client_handler_383._labels = None
    _Client_handler_383._notlabels = None
