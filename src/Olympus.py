# -*- generated by 1.0.9 -*-
import da
PatternExpr_181 = da.pat.TuplePattern([da.pat.ConstantPattern('req_get_current_configuration'), da.pat.FreePattern('client')])
PatternExpr_204 = da.pat.TuplePattern([da.pat.ConstantPattern('req_get_current_configuration'), da.pat.FreePattern('client')])
_config_object = {}

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._OlympusReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_0', PatternExpr_181, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_1', PatternExpr_204, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_203])])

    def setup(self, **rest_308):
        super().setup(**rest_308)
        class_config = da.import_da('Configuration')
        self._state.config = class_config.Configuration()

    def run(self):
        self.output('Olympus:>> Started')
        super()._label('_st_label_178', block=False)
        client = None

        def ExistentialOpExpr_179():
            nonlocal client
            for (_, _, (_ConstantPattern196_, client)) in self._OlympusReceivedEvent_0:
                if (_ConstantPattern196_ == 'req_get_current_configuration'):
                    if True:
                        return True
            return False
        _st_label_178 = 0
        while (_st_label_178 == 0):
            _st_label_178 += 1
            if ExistentialOpExpr_179():
                _st_label_178 += 1
            else:
                super()._label('_st_label_178', block=True)
                _st_label_178 -= 1

    def makeNewConfiguration(self):
        self.output('Olympus:>> Making New Configuration')
        if (self._state.config.config_id is None):
            self._state.config.config_id = 1
        else:
            self._state.config.config_id += 1
        class_replica = da.import_da('Replica')
        replicaList = self.new(class_replica.Replica, num=3)
        self.output('Olympus:>> Setting up Replicas')
        i = 0
        for replica in replicaList:
            self._setup(replica, args=(self._id, replicaList, i))
            i += 1
        self._state.config.list_replica = list(replicaList)
        self._start(replicaList)

    def _Olympus_handler_203(self, client):
        self.output('Olympus:>> Received req_get_current_configuration from Client')
        if ((self._state.config.config_id is None) or (self._state.config.config_id is None)):
            self.output('Olympus:>> Configuration is NONE')
            self.makeNewConfiguration()
        self.output('Olympus:>> Replying res_get_current_configuration with configuration')
        self.send(('res_get_current_configuration', self._state.config), to=client)
    _Olympus_handler_203._labels = None
    _Olympus_handler_203._notlabels = None
