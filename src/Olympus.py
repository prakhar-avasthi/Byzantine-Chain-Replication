# -*- generated by 1.0.9 -*-
import da
PatternExpr_186 = da.pat.TuplePattern([da.pat.ConstantPattern('req_get_current_configuration'), da.pat.FreePattern('client')])
PatternExpr_209 = da.pat.TuplePattern([da.pat.ConstantPattern('req_get_current_configuration'), da.pat.FreePattern('client')])
_config_object = {}

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._OlympusReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_0', PatternExpr_186, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_1', PatternExpr_209, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_208])])

    def setup(self, num_replica, head_timeout, nonhead_timeout, **rest_363):
        super().setup(num_replica=num_replica, head_timeout=head_timeout, nonhead_timeout=nonhead_timeout, **rest_363)
        self._state.num_replica = num_replica
        self._state.head_timeout = head_timeout
        self._state.nonhead_timeout = nonhead_timeout
        self.output('Olympus:>> Setup')
        class_config = da.import_da('Configuration')
        self._state.config = class_config.Configuration()

    def run(self):
        self.output('Olympus:>> Started')
        super()._label('_st_label_183', block=False)
        client = None

        def ExistentialOpExpr_184():
            nonlocal client
            for (_, _, (_ConstantPattern201_, client)) in self._OlympusReceivedEvent_0:
                if (_ConstantPattern201_ == 'req_get_current_configuration'):
                    if True:
                        return True
            return False
        _st_label_183 = 0
        while (_st_label_183 == 0):
            _st_label_183 += 1
            if ExistentialOpExpr_184():
                _st_label_183 += 1
            else:
                super()._label('_st_label_183', block=True)
                _st_label_183 -= 1

    def makeNewConfiguration(self):
        self.output('Olympus:>> Making New Configuration')
        if (self._state.config.config_id is None):
            self._state.config.config_id = 1
        else:
            self._state.config.config_id += 1
        class_replica = da.import_da('Replica')
        replicaList = self.new(class_replica.Replica, num=self._state.num_replica)
        self.output('Olympus:>> Setting up Replicas')
        i = 0
        for replica in replicaList:
            if (i is 0):
                self._setup(replica, args=(self._id, list(replicaList), i, 'head', dict(), dict(), self._state.head_timeout))
            elif (i is (self._state.num_replica - 1)):
                self._setup(replica, args=(self._id, list(replicaList), i, 'tail', dict(), dict(), self._state.nonhead_timeout))
            else:
                self._setup(replica, args=(self._id, list(replicaList), i, 'normal_replica', dict(), dict(), self._state.nonhead_timeout))
            i += 1
        self._state.config.list_replica = list(replicaList)
        self._start(replicaList)

    def _Olympus_handler_208(self, client):
        self.output('Olympus:>> Received req_get_current_configuration from Client')
        if ((self._state.config.config_id is None) or (self._state.config.config_id is None)):
            self.output('Olympus:>> Configuration is NONE')
            self.makeNewConfiguration()
        self.output('Olympus:>> Replying res_get_current_configuration with configuration')
        self.send(('res_get_current_configuration', self._state.config), to=client)
    _Olympus_handler_208._labels = None
    _Olympus_handler_208._notlabels = None
