# -*- generated by 1.0.9 -*-
import da
PatternExpr_180 = da.pat.TuplePattern([da.pat.ConstantPattern('req_get_current_configuration'), da.pat.FreePattern('client')])
PatternExpr_203 = da.pat.TuplePattern([da.pat.ConstantPattern('req_get_current_configuration'), da.pat.FreePattern('client')])
_config_object = {}

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._OlympusReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_0', PatternExpr_180, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_1', PatternExpr_203, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_202])])

    def setup(self, **rest_317):
        super().setup(**rest_317)
        self._state.config_id = None
        self._state.configuration = None

    def run(self):
        self.output('Olympus:>> Started')
        super()._label('_st_label_177', block=False)
        client = None

        def ExistentialOpExpr_178():
            nonlocal client
            for (_, _, (_ConstantPattern195_, client)) in self._OlympusReceivedEvent_0:
                if (_ConstantPattern195_ == 'req_get_current_configuration'):
                    if True:
                        return True
            return False
        _st_label_177 = 0
        while (_st_label_177 == 0):
            _st_label_177 += 1
            if ExistentialOpExpr_178():
                _st_label_177 += 1
            else:
                super()._label('_st_label_177', block=True)
                _st_label_177 -= 1

    def makeNewConfiguration(self):
        self.output('Olympus:>> Making New Configuration')
        if (self._state.config_id is None):
            self._state.config_id = 1
        else:
            self._state.config_id += 1
        class_replica = da.import_da('Replica')
        replicaList = self.new(class_replica.Replica, num=3)
        self.output('Olympus:>> Setting up Replicas')
        i = 0
        for replica in replicaList:
            self._setup(replica, args=(self._id, replicaList, i))
            i += 1
        self._start(replicaList)
        return (self._state.config_id, list(replicaList))

    def _Olympus_handler_202(self, client):
        self.output('Olympus:>> Received req_get_current_configuration from Client')
        if (self._state.configuration is None):
            self.output('Olympus:>> Configuration is NONE')
            config = self.makeNewConfiguration()
            self._state.config_id = config[0]
            self._state.configuration = config[1]
        self.output('Olympus:>> Replying res_get_current_configuration with configuration')
        self.send(('res_get_current_configuration', self._state.config_id, self._state.configuration), to=client)
    _Olympus_handler_202._labels = None
    _Olympus_handler_202._notlabels = None
